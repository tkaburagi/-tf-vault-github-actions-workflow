name: tfc-azure-provisioning
on:
  repository_dispatch:
    types: 
      - repository-src-updated
jobs:
  tfc-azure-provisioning:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Import TFC API Token from Vault
        id: tfc_secrets
        uses: hashicorp/vault-action@v2.3.1
        with:
          url: ${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          exportToken: ${{ secrets.VAULT_TOKEN }}
          namespace: admin
          secrets: |
            tfc/creds/ci-user token | TFC_TOKEN ;
      - name: Terraform Test
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt install -y terraform
          terraform -version
          ls -ltr
          terraform fmt -diff=true
          terraform init
          terraform validate
      - name: Import Azure Secrets from Vault
        id: azure_secrets
        uses: hashicorp/vault-action@v2.3.1
        with:
          url: ${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          exportToken: ${{ secrets.VAULT_TOKEN }}
          namespace: admin
          secrets: |
            azure/creds/contributor client_id | ARM_CLIENT_ID ;
            azure/creds/contributor client_secret | ARM_CLIENT_SECRET ;
            secret/data/azure/environment subscription_id | ARM_SUBSCRIPTION_ID;
            secret/data/azure/environment tenant_id | ARM_TENANT_ID ;
      - name: Set TFC Environmet Variables
        env:
          WS_ID: ${{secrets.WS_ID}} 
        run: |
          cd tf-tfc
          ls -ltr
          cat << EOF > .terraformrc
          credentials "app.terraform.io" {
              token = "${TFC_TOKEN}"
          }
          EOF
          export TF_CLI_CONFIG_FILE=.terraformrc
          terraform init
          export TFE_TOKEN=${TFC_TOKEN}
          export TF_VAR_workspace_id=${WS_ID}
          export TF_VAR_arm_client_id=${ARM_CLIENT_ID}
          export TF_VAR_arm_client_secret=${ARM_CLIENT_SECRET}
          export TF_VAR_arm_tenant_id=${ARM_TENANT_ID}
          export TF_VAR_arm_sub_id=${ARM_SUBSCRIPTION_ID}
          terraform destroy -auto-approve
          terraform apply -auto-approve
      - uses: actions/checkout@v2
        with:
          repository: tkaburagi/tf-vault-github-actions-src
      - name: Make TFC
        env:
          WS_ID: ${{secrets.WS_ID}} 
          TFC_ORG_NAME: ${{ secrets.TFC_ORG_NAME }}
        run: |
          curl \
            --header "Authorization: Bearer ${TFC_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
            https://app.terraform.io/api/v2/workspaces/${WS_ID} | jq -r '.data.attributes.name' > ws-name
          
          WS_NAME=$(cat ws-name)

          cat << EOF > main.tf
          terraform {
            backend "remote" {
              organization = "${TFC_ORG_NAME}"

              workspaces {
                name = "${WS_NAME}"
              }
            }
          }

          provider "azurerm" {
              features {}
          }
          EOF

          cat main.tf
          ls -ltrR
          tar -zcvf tf.tar.gz -C . main.tf output.tf variables.tf azure.tf

          echo '{"data":{"type":"configuration-version"}}' > ./create_config_version.json
          
          UPLOAD_URL=($(curl \
            --header "Authorization: Bearer ${TFC_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data @create_config_version.json \
            https://app.terraform.io/api/v2/workspaces/${WS_ID}/configuration-versions \
            | jq -r '.data.attributes."upload-url"'))
          
          curl \
            --header "Content-Type: application/octet-stream" \
            --request PUT \
            --data-binary @tf.tar.gz \
            $UPLOAD_URL
          rm ./create_config_version.json
          rm ./tf.tar.gz